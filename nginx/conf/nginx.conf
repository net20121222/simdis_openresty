
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # 设置默认 lua 搜索路径，添加 lua 路径
    lua_package_path '/usr/local/openresty/nginx/lua/?.lua;/blah/?.lua;;';

    # 对于开发研究，我们可以对代码 cache 进行关闭，这样我们不必每次都重新加载nginx
    lua_code_cache off;

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        access_log  logs/host.access.log  main;

        #location / {
            #root   html;
            #index  index.html index.htm;
        #}

        location ~ ^/rcsapi/([-_a-zA-Z0-9/]+)/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  /usr/local/openresty/nginx/lua/rcsapi/access_check.lua;

            # 内容生成阶段
            content_by_lua_file /usr/local/openresty/nginx/lua/rcsapi/$1_$2.lua;
        }

        location ~ ^/peerapi/([-_a-zA-Z0-9/]+)/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  /usr/local/openresty/nginx/lua/peerapi/access_check.lua;

            # 内容生成阶段
            content_by_lua_file /usr/local/openresty/nginx/lua/peerapi/$1_$2.lua;
        }

        location ~ ^/trackapi/([-_a-zA-Z0-9/]+)/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  /usr/local/openresty/nginx/lua/trackapi/access_check.lua;

            # 内容生成阶段
            content_by_lua_file /usr/local/openresty/nginx/lua/trackapi/$1_$2.lua;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
